/*
Gramatica actualizada para el Robot:
Adaptado para nueva sintaxis de comandos, variables, procedimientos y estructuras de control
Autor original: Alejandro Arango
Modificado por: Silvia Takahashi, Juan Pablo Morales






---------------------------------------------------------
Parser con instrucciones del robot modificadas por Sofi.
---------------------------------------------------------



*/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
}

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("serial")
public class Robot 
{
	private RobotWorldDec world;
	private HashMap<String, Integer> variables = new HashMap<>();
	private HashMap<String, Procedure> procedures = new HashMap<>();

	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida = new String();

	class Procedure {
		String name;
		HashMap<String, Integer> paramValues;
		List<String> paramNames;
		HashMap<String, Integer> varLocales = new HashMap<>();
		List<String> body;

		Procedure(String name, HashMap<String, Integer> paramValues, List<String> paramNames, List<String> body)
		{
			this.name = name;
			this.paramNames = paramNames;
			this.body = body;
			this.paramValues = paramValues;
		}
	}
}
PARSER_END(Robot)

SKIP:
{
	" "
	| "\r"
	| "\t"
	| "\n"
}

TOKEN:
{
    <#LETTER: ["a"-"z", "A"-"Z"]>
    | <#DIGIT: ["0"-"9"]>
}

TOKEN: {
    <BREAK: "break">
    | <CONTINUE: "continue">
}



TOKEN: /* Comandos actualizados seg√∫n el enunciado */
{
    <MOVE: "move"> 
    | <TURN: "turn">
    | <FACE: "face">
    | <PUT: "put">
    | <PICK: "pick">
    | <POP: "pop">
    | <GOTO: "goto">
    | <JUMP: "jump">
    | <NOP: "nop">
    | <PROC: "proc">
    | <ASSIGN: ":=">
    | <IF: "if:">
    | <THEN: "then:">
    | <ELSE: "else:">
    | <WHILE: "while:">
    | <DO: "do:">
    | <FOR: "for:">
    | <INDIR: "inDir:">
    | <TOTHE: "toThe:">
    | <OFTYPE: "ofType:">
    | <REPEAT: "repeat:">
    | <ID: <LETTER> (<LETTER> | <DIGIT> | "_")* >
    | <CONSTANT:  "#red" | "#green" | "#blue"> 
}

TOKEN:
{
    <BALLOONS: "#balloons">
    | <CHIPS: "#chips">
    | <BACK: "#back">
    | <FRONT: "#front">
    | <LEFT: "#left">
    | <RIGHT: "#right">
    | <AROUND: "#around">
    | <NORTH: "#north">
    | <SOUTH: "#south">
    | <WEST: "#west">
    | <EAST: "#east">
}

TOKEN: {
    <SUMA: "+"> | <RESTA: "-">
}




TOKEN:
{
    <NUM: (["0"-"9"])+ >
}

TOKEN:
{
    <CANMOVE: "canMove:">
  |  <FACING: "facing:">
  |  <CANPUT: "canPut:">
  |  <CANPICK: "canPick:">
  |  <CANJUMP: "canJump:">
  |  <NOT: "not:">
}


Token objType():
{
    Token t;
}
{
    t = <BALLOONS> { return t; } | t = <CHIPS> { return t; }
}


boolean command(Console sistema):
{
    boolean bool;
}
{
    variable_declaration(true, "") // declaro las variables globales al inicio
    { bool=true;
    	return bool;
    }
    
    | bool = interna(sistema, true, 1, "") 
    { return bool; }
}





boolean interna (Console sistema, boolean ejecutar, int numVecesEjecucion, String procName):
{
    int x, y, n;
    salida = new String();
    Token t;
    Token tok;
}
{

    (
        <MOVE> ":" x=expr(procName) moveIndirTothe(x, ejecutar, numVecesEjecucion, procName) "." { if (ejecutar) salida = "Command: Move"; }
        
        | <TURN> ":" turnDirections(ejecutar,numVecesEjecucion, procName) "." {if (ejecutar) salida = "Command: Turn"; }
        
        | <FACE> ":" faceDirections(ejecutar,numVecesEjecucion, procName) "." {if (ejecutar) salida = "Command: Face"; }
        
        | <PUT> ":" n=expr(procName) <OFTYPE> t=objType() "." 
            { if (ejecutar)
            	{ for (int i = 0; i < numVecesEjecucion; i++)
            	  { 
	                if (n <= 0) throw new Error("PUT error: n debe ser mayor que 0");
	                if (t.image.equals("#chips")) {
	                    world.putChips(n);
	                    salida = "Command: Put " + n + " chips"; 
	              	}
	              	else if (t.image.equals("#balloons"))
	              	{
	                    world.putBalloons(n);
	                    salida = "Command: Put " + n + " balloons";
	                 }
	           	  }
                }
                if (procedures.containsKey(procName) )
	           	{
					Procedure proc= procedures.get(procName);
					if (t.image.equals("#chips")) {
					  proc.body.add("put chips_"+String.valueOf(n));
					}
					else if (t.image.equals("#balloons"))
					{ proc.body.add("put balloons_"+String.valueOf(n));
					}
				}
            }
        | <PICK> ":" n=expr(procName) <OFTYPE> t=objType() "." 
            { if (ejecutar)
              { for (int i = 0; i < numVecesEjecucion; i++)
              	{ 
	                if (n <= 0) throw new Error("PICK error: n debe ser mayor que 0");
	                if (t.image.equals("#chips")) {
	                    world.pickChips(n);
	                    salida = "Command: Pick " + n + " chips"; 
	                } else if (t.image.equals("#balloons")) {
	                    world.grabBalloons(n);
	                    salida = "Command: Pick " + n + " balloons"; 
	                }
	             }
	           }
	           	if (procedures.containsKey(procName) )
	           	{
					Procedure proc= procedures.get(procName);
					if (t.image.equals("#chips")) {
					  proc.body.add("pick chips_"+String.valueOf(n));
					}
					else if (t.image.equals("#balloons"))
					{ proc.body.add("pick balloons_"+String.valueOf(n));
					}
				}
            }
            	
          
        | <GOTO> ":" x=expr(procName) "with:" y=expr(procName) "."
            { if (ejecutar)
          		{ for (int i = 0; i < numVecesEjecucion; i++)
          			{  world.setPostion(x, y);
          			salida = "Command: GoTo"; }
          		}
          	  if (procedures.containsKey(procName) )
          	  { 
				Procedure proc= procedures.get(procName);
				proc.body.add("go to_"+String.valueOf(x)+"_"+String.valueOf(y));}
             }	
            
        | <JUMP> ":" n=expr(procName) jumpIndirTothe(n, ejecutar, numVecesEjecucion, procName) "." { if (ejecutar) salida = "Command: Jump"; }
        
        | <NOP> "." { if (ejecutar) salida = "Command: NOP"; }
        
        | procedure(sistema)
        
        | idTokenPath(procName) 
        
        | conditional(sistema, procName)
        
        | loop(sistema, procName)
    ) 
    {
        try { Thread.sleep(900); } 
        catch (InterruptedException e) { System.err.format("IOException: %s%n", e); }

        sistema.printOutput(salida);
        return true;
    } 
    | <EOF> { return false; }
}




void variable_declaration(boolean esGlobal, String procName):
{
    Token varName;
}
{

      "|" 
      ( varName=<ID> 
        { 
          if (esGlobal) { 
              variables.put(varName.image, 0);
          }
          else
          	procedures.get(procName).varLocales.put(varName.image, 0);
        }  
      )* 
      "|"

}



void assignment(Token varName, String procName):
{
    int valor;
}
{
    ":=" valor=expr(procName) "."
    {
        if (variables.containsKey(varName.image)) {  
            // Si es una variable global, actualiza su valor
            variables.put(varName.image, valor);
        } 
        else if (procedures.containsKey(procName) && procedures.get(procName).paramValues.containsKey(varName.image))
        {
          	//Caso de que es un parametro
          	procedures.get(procName).paramValues.put(varName.image, valor);
        }
        else if (procedures.containsKey(procName) && procedures.get(procName).varLocales.containsKey(varName.image))
        {
          //Caso de que es una variable local
          procedures.get(procName).varLocales.put(varName.image, valor);
       }
        else
        {
            throw new Error("Variable no definida: " + varName.image);
        }
    }
}




void procedure(Console sistema):
{
    Token procName;
    List<String> body = new ArrayList<>();
    HashMap<String, Integer > paramValues = new HashMap<String, Integer >();
    List<String > paramNames = new ArrayList<>(); 
}
{   
    <PROC> procName=<ID> ( ":" paramList(paramValues, paramNames) )* "[" 
    {
        procedures.put(procName.image, new Procedure(procName.image, paramValues, paramNames, body));
    }
    (variable_declaration(false, procName.image))? // Solo ejecuta si hay variables
    ( interna(sistema, false, 1, procName.image) )* "]"
}




void paramList(HashMap<String, Integer > paramValues, List<String> paramNames ):
{
	Token param;
}
{
	param=<ID>
		{ paramValues.put(param.image, 0);
		  paramNames.add(param.image);
		}
	(  (<ID> ":" | "with:") param=<ID>
		{ paramValues.put(param.image, 0);
		  paramNames.add(param.image);
		}
	)*
}

void idTokenPath(String procName):
{
  Token tok;
}
{
	( tok= <ID>  ) (assignment(tok, procName)| procCall(tok, procName) )
}

void procCall(Token procTok, String procName):
{
  int numParam=0;
  Procedure proc;
  int n;
  Token tok;
  String paramName;
}
{
	":" n=expr(procName)
		{if (!procedures.containsKey(procTok.image))
			throw new Error("No esta definido  el procedimiento " + procTok );
		else
			proc=procedures.get(procTok.image);

		if (proc.paramNames.size()< 1)
			throw new Error("Numero incorrecto de parametros");
			
		 numParam=1;
    	 paramName=proc.paramNames.get(0);
    	 proc.paramValues.put(paramName, n);
		}

	(< ID > ":" n=expr(procName)
		 { numParam+=1;
		 
		 if (proc.paramNames.size()< numParam)
			throw new Error("Numero incorrecto de parametros para este procedimiento");
		 
    	 paramName=proc.paramNames.get(numParam-1);
    	 proc.paramValues.put(paramName, n);
		 }
	)*
	"." { procBodyCommands(procTok.image); }
	  
	| "."
		{ if (!procedures.containsKey(procTok.image))
			throw new Error("No esta definido  el procedimiento " + procTok );
		  else
		  	procBodyCommands(procTok.image);
		}
	
}



///
///MOVE Y JUMP COMMANDS
///
void moveDirectionLRFB(int x, boolean ejecutar, int numVeces, String procName):
{
}
{
    <LEFT>
	    { if (ejecutar)
	    	{ for (int i = 0; i < numVeces; i++) 
		    	{ instrMoveJumpLeft(x, false); }
			}
			if (procedures.containsKey(procName) ){
			Procedure proc= procedures.get(procName);
			proc.body.add("move left_"+String.valueOf(x)); }
	     }
    | <RIGHT>
	    { if (ejecutar)
	    	{ for (int i = 0; i < numVeces; i++) 
		    	{ instrMoveJumpRight(x, false);}
		 	}
		 	if (procedures.containsKey(procName) ){ 
			Procedure proc= procedures.get(procName);
			proc.body.add("move right_"+String.valueOf(x));}
		 	
	     }
    | <FRONT>
	     { if (ejecutar)
	     	{ for (int i = 0; i < numVeces; i++)
	     		{ world.moveForward(x, false) ; }
	     	}
	     	if (procedures.containsKey(procName) ){
			Procedure proc= procedures.get(procName);
			proc.body.add("move forward_"+String.valueOf(x)); }
	     }
    | <BACK>
	    { if (ejecutar)
	    	{ for (int i = 0; i < numVeces; i++) 
		    	{ instrMoveJumpBack(x,false); }
			}
			if (procedures.containsKey(procName) ){
			Procedure proc= procedures.get(procName);
			proc.body.add("move back_"+String.valueOf(x)); }
	     }
}

void moveDirectionNESW(int x, boolean ejecutar, int numVeces, String procName):
{
}
{
		<EAST >
			 { if (ejecutar)
			 	{ for (int i = 0; i < numVeces; i++) 
				 	{ instrMoveEast(x); }
				}
				if (procedures.containsKey(procName) ){
				Procedure proc= procedures.get(procName);
				proc.body.add("move east_"+String.valueOf(x)); }
			}
		|  <WEST >
			{ if (ejecutar)
				{ for (int i = 0; i < numVeces; i++) 
					{ instrMoveWest(x); }
				}
				if (procedures.containsKey(procName) ){
				Procedure proc= procedures.get(procName);
				proc.body.add("move west_"+String.valueOf(x)); }
			}
		|  <NORTH >
			{ if (ejecutar)
				{ for (int i = 0; i < numVeces; i++) 
					{  instrMoveNorth(x);}
				}
				if (procedures.containsKey(procName) ){
				Procedure proc= procedures.get(procName);
				proc.body.add("move north_"+String.valueOf(x)); }
			}
		| <SOUTH >
			{ if (ejecutar)
				{ for (int i = 0; i < numVeces; i++) 
					{  instrMoveSouth(x);}
				}
				if (procedures.containsKey(procName) ){
				Procedure proc= procedures.get(procName);
				proc.body.add("move south_"+String.valueOf(x)); }
			}
}

void moveIndirTothe(int x, boolean ejecutar, int numVeces, String procName):
{
}
{
  < INDIR > moveDirectionNESW(x, ejecutar, numVeces, procName)
	| < TOTHE > moveDirectionLRFB(x, ejecutar, numVeces, procName)
	| { if (ejecutar)
		{ for (int i = 0; i < numVeces; i++)
			{world.moveForward(x, false); }	 
		}
		if (procedures.containsKey(procName) ){
		Procedure proc= procedures.get(procName);
		proc.body.add("move forward_"+String.valueOf(x)); }
	  }
}

void jumpIndirTothe(int x, boolean ejecutar, int numVeces, String procName):
{
}
{
        < INDIR > jumpDirectionNESW(x,ejecutar, numVeces, procName)
	| < TOTHE > jumpDirectionLRFB(x,ejecutar, numVeces, procName)
    | { if (ejecutar)
		{ for (int i = 0; i < numVeces; i++)
			{world.moveForward(x, true); }	 
		}
		if (procedures.containsKey(procName) ){
		Procedure proc= procedures.get(procName);
		proc.body.add("jump forward_"+String.valueOf(x)); }
	  }
}


void jumpDirectionNESW(int x, boolean ejecutar, int numVeces, String procName):
{
}
{
		 <EAST >
		  { if (ejecutar)
		  	{ for (int i = 0; i < numVeces; i++)
			  	{ instrJumpEast(x); }
		 	}
		 	if (procedures.containsKey(procName) ){
		 	Procedure proc= procedures.get(procName);
			proc.body.add("jump east_"+String.valueOf(x)); }
		  }
		| <WEST >
			{ if (ejecutar)
				{ for (int i = 0; i < numVeces; i++)
					{ instrJumpWest(x); }
				}
			if (procedures.containsKey(procName) ){
		 	Procedure proc= procedures.get(procName);
			proc.body.add("jump west_"+String.valueOf(x)); }
			}
		| <NORTH >
			{ if (ejecutar)
				{ for (int i = 0; i < numVeces; i++)
					{ instrJumpNorth(x); }
				}
				if (procedures.containsKey(procName) ){
		 	Procedure proc= procedures.get(procName);
			proc.body.add("jump north_"+String.valueOf(x)); }
			}
		| <SOUTH >
			{if (ejecutar)
				{ for (int i = 0; i < numVeces; i++)
					{  instrJumpSouth(x);}
				}
				if (procedures.containsKey(procName) ){
		 	Procedure proc= procedures.get(procName);
			proc.body.add("jump south_"+String.valueOf(x)); }
			}
}

void jumpDirectionLRFB(int x, boolean ejecutar, int numVeces, String procName):
{
}
{
    <LEFT>
	    { if (ejecutar)
	    	{ for (int i = 0; i < numVeces; i++)
		    	{ instrMoveJumpLeft(x, true); }
		    }
		    if (procedures.containsKey(procName) ){
			Procedure proc= procedures.get(procName);
			proc.body.add("jump left_"+String.valueOf(x)); }
	     }
    | <RIGHT>
	    {if (ejecutar)
	    	{ for (int i = 0; i < numVeces; i++)
		    	{ instrMoveJumpRight(x, true); }
		    }
		    if (procedures.containsKey(procName) ){
			Procedure proc= procedures.get(procName);
			proc.body.add("jump right_"+String.valueOf(x)); }
	     }
    | <FRONT>
	     {if (ejecutar)
	     	{ for (int i = 0; i < numVeces; i++)
	       		{ world.moveForward(x, true) ; }
	      	}
	      	if (procedures.containsKey(procName) ){
			Procedure proc= procedures.get(procName);
			proc.body.add("jump forward_"+String.valueOf(x)); }
	     }	
    | <BACK>
	    { if (ejecutar)
	    	{ for (int i = 0; i < numVeces; i++)
		    	{ instrMoveJumpBack(x, true); }
		    }
		    if (procedures.containsKey(procName) ){
			Procedure proc= procedures.get(procName);
			proc.body.add("jump back_"+String.valueOf(x)); }
	     }
}

///
//CONDITIONS Y LOOPS
//
void conditional(Console sistema, String procName):
{
  boolean bool;
  int numNot=0;
  boolean ejecutableIf=true;
  boolean ejecutableThen=false;
}
{
    <IF> numNot=notCondition() bool=conditions(procName)
    	{
    	  if (numNot%2!=0)
    	  	bool=!bool;
    	  if (bool)
    		{ ejecutableIf= true;
			ejecutableThen=false;
			}
		else
			{ ejecutableIf=false;
			ejecutableThen=true;
			}
    	}
    <THEN> "[" ( interna(sistema, ejecutableIf, 1, procName) )* "]" (<ELSE> "[" (interna(sistema, ejecutableThen, 1, procName))* "]")?
    
}

void loop(Console sistema, String procName):
{
    boolean bool;
    int numNot = 0;
    boolean ejecutable;
    int repeticiones;
    int n;
}
{
    <WHILE> numNot = notCondition() bool = conditions(procName)
    {
        if (numNot % 2 != 0) {
            bool = !bool;
        }
        ejecutable = bool;
    }
    <DO> "[" ( interna(sistema, ejecutable, 1, procName) )*   "]"
   |  < FOR > n=expr(procName) < REPEAT > "[" ( interna(sistema, true, n, procName) )*   "]"
}


int notCondition():
{
  int total=0;
}
{
	(<NOT> { total+=1; } )*

	{return total; }
}

boolean conditions(String procname):
{
  int x=0;
  boolean bool;
}
{	  <CANMOVE> x=expr(procname) bool=canMoveInDirToTheCondition(x) "." { return bool; }
	  |  <FACING>  bool=facingCondition() "." { return bool; }
	  |  <CANPUT> x=expr(procname) < OFTYPE >  bool=canPutCondition( x) "." { return bool; }
	  |  <CANPICK> x=expr(procname) < OFTYPE >  bool=canPickCondition( x) "." { return bool; }
	  |  <CANJUMP> x=expr(procname)  bool=canJumpInDirToTheCondition(x) "." { return bool; }
	
}

boolean canJumpInDirToTheCondition(int x):
{
  boolean bool;
}
{
	< INDIR > bool=canJumpNESWCondition(x) { return bool; }
	| < TOTHE > bool=canJumpLRFBCondition(x) { return bool; }
}

boolean canJumpNESWCondition(int steps):
{
  Point pos;
  int newY;
  int newX;
}
{
	<SOUTH >
		{
		  pos=world.getPosition();
		  newY=pos.y+steps;
		  if (newY > world.getN() ||  world.isBlocked(new Point(pos.x, newY)))
		  	return false; 
		  else
		  	return true;
		  
		}
	|< NORTH >
		{
		  pos=world.getPosition();
		  newY=pos.y- steps;
		  if (newY< 1 || world.isBlocked(new Point(pos.x, newY)))
		  	return false; 
		  else
		  	return true;
		  
		}
	| < EAST >
		{
		  pos=world.getPosition();
		  newX=pos.x+ steps;
		  if (newX > world.getN() || world.isBlocked(new Point(newX, pos.y)))
		  	return false; 
		  else
		  	return true;
		  
		}
	| < WEST >
		{
		  pos=world.getPosition();
		  newX=pos.x- steps;
		  if (newX< 1 || world.isBlocked(new Point(newX, pos.y)))
		  	return false; 
		  else
		  	return true;	  
		}
}

boolean canJumpLRFBCondition(int steps):
{
  Point pos;
  Point newPos;
  int newP;
  int cardinalDir;
}
{
	<LEFT >
		{
		  pos=world.getPosition();
		  newPos= getNewPos( steps, "LEFT");
		  
		  if (newPos.x==pos.x)
		  	newP=newPos.y;
		  else
		  	newP=newPos.x;
		 
		  if (newP > world.getN() || newP<1  || world.isBlocked(newPos) )
		  	return false; 
		  else
		  	return true;
		  
		}
	|< RIGHT >
		{
		  pos=world.getPosition();
		  newPos= getNewPos( steps, "RIGHT");
		  
		  if (newPos.x==pos.x)
		  	newP=newPos.y;
		  else
		  	newP=newPos.x;
		 
		  if (newP > world.getN() || newP<1 || world.isBlocked(newPos) )
		  	return false; 
		  else
		  	return true;
		  
		}
	| < FRONT >
		{
		  pos=world.getPosition();
		  newPos= getNewPos( steps, "FRONT");
		  
		  if (newPos.x==pos.x)
		  	newP=newPos.y;
		  else
		  	newP=newPos.x;
		 
		  if (newP > world.getN() || newP<1 || world.isBlocked(newPos) )
		  	return false; 
		  else
		  	return true;
		  
		}
	| < BACK >
		{
		  pos=world.getPosition();
		  newPos= getNewPos( steps, "BACK");
		  
		  if (newPos.x==pos.x)
		  	newP=newPos.y;
		  else
		  	newP=newPos.x;
		 
		  if (newP > world.getN() || newP<1  || world.isBlocked(newPos) )
		  	return false; 
		  else
		  	return true;
		  
		}
}


boolean canMoveNESWCondition(int steps):
{
  Point pos;
  int newY;
  int newX;
}
{
	<SOUTH >
		{
		  pos=world.getPosition();
		  newY=pos.y+steps;
		  if (newY > world.getN() || world.blockedInRange(pos.x, pos.y, newY, SOUTH) || world.isBlocked(new Point(pos.x, newY)))
		  	return false; 
		  else
		  	return true;
		  
		}
	|< NORTH >
		{
		  pos=world.getPosition();
		  newY=pos.y- steps;
		  if (newY< 1 || world.blockedInRange(pos.x, pos.y, newY, NORTH) || world.isBlocked(new Point(pos.x, newY)))
		  	return false; 
		  else
		  	return true;
		  
		}
	| < EAST >
		{
		  pos=world.getPosition();
		  newX=pos.x+ steps;
		  if (newX > world.getN() || world.blockedInRange(pos.x, pos.y, newX, EAST) || world.isBlocked(new Point(newX, pos.y)))
		  	return false; 
		  else
		  	return true;
		  
		}
	| < WEST >
		{
		  pos=world.getPosition();
		  newX=pos.x- steps;
		  if (newX< 1 || world.blockedInRange(pos.x, pos.y, newX, WEST) || world.isBlocked(new Point(newX, pos.y)))
		  	return false; 
		  else
		  	return true;	  
		}
}

boolean canMoveLRFBCondition(int steps):
{
  Point pos;
  Point newPos;
  int newP;
  int cardinalDir;
}
{
	<LEFT >
		{
		  pos=world.getPosition();
		  newPos= getNewPos( steps, "LEFT");
		  
		  if (newPos.x==pos.x)
		  	newP=newPos.y;
		  else
		  	newP=newPos.x;

		 cardinalDir= getCardinalDirHeaded("LEFT");
		 
		  if (newP > world.getN() || newP<1 || world.blockedInRange(pos.x, pos.y, newP, cardinalDir) || world.isBlocked(newPos) )
		  	return false; 
		  else
		  	return true;
		  
		}
	|< RIGHT >
		{
		  pos=world.getPosition();
		  newPos= getNewPos( steps, "RIGHT");
		  
		  if (newPos.x==pos.x)
		  	newP=newPos.y;
		  else
		  	newP=newPos.x;

		 cardinalDir= getCardinalDirHeaded("RIGHT");
		 
		  if (newP > world.getN() || newP<1 || world.blockedInRange(pos.x, pos.y, newP, cardinalDir) || world.isBlocked(newPos) )
		  	return false; 
		  else
		  	return true;
		  
		}
	| < FRONT >
		{
		  pos=world.getPosition();
		  newPos= getNewPos( steps, "FRONT");
		  
		  if (newPos.x==pos.x)
		  	newP=newPos.y;
		  else
		  	newP=newPos.x;

		 cardinalDir= getCardinalDirHeaded("FRONT");
		 
		  if (newP > world.getN() || newP<1 || world.blockedInRange(pos.x, pos.y, newP, cardinalDir) || world.isBlocked(newPos) )
		  	return false; 
		  else
		  	return true;
		  
		}
	| < BACK >
		{
		  pos=world.getPosition();
		  newPos= getNewPos( steps, "BACK");
		  
		  if (newPos.x==pos.x)
		  	newP=newPos.y;
		  else
		  	newP=newPos.x;

		 cardinalDir= getCardinalDirHeaded("BACK");
		 
		  if (newP > world.getN() || newP<1 || world.blockedInRange(pos.x, pos.y, newP, cardinalDir) || world.isBlocked(newPos) )
		  	return false; 
		  else
		  	return true;
		  
		}
}


boolean canMoveInDirToTheCondition(int x):
{  boolean bool;
}
{
	< INDIR > bool=canMoveNESWCondition( x) { return bool; }
	| < TOTHE > bool=canMoveLRFBCondition( x) { return bool ;}
}

boolean canPutCondition(int x):
{
}
{
  < BALLOONS > {if ( world.getMyBalloons()< x) return false; else return true; }
	|  < CHIPS > { if (x > world.freeSpacesForChips() ||  world.getMyChips()< x) return false; else return true;}
}

boolean canPickCondition(int x):
{
}
{
  < BALLOONS > { if (x > world.countBalloons()) return false; else return true;}
	|  < CHIPS > { if (x > world.chipsToPick()) return false; else return true;}
}

boolean facingCondition():
{
}
{
	< NORTH > { return world.facingNorth(); }
	| <SOUTH> { return world.facingSouth(); }
	| < EAST > { return world.facingEast(); }
	| < WEST > { return world.facingWest(); }
}

//
//OTROS
int expr(String procName):
{
    int total = 0;
    int valor;
    Token operador;
}
{
    valor = factor(procName) { total = valor; }
    { return total; }
}

int factor(String procName):
{
    int total = 0;
}
{
    ( <NUM> { total = Integer.parseInt(token.image); return total;}
    | <ID>
    {
        if (procName.equals(""))
        {
            if (!variables.containsKey(token.image))
            {
                throw new Error("Variable global no definida: " + token.image);
            }
            total = variables.get(token.image);
        }
        else 
        {
            if (!procedures.containsKey(procName) )
            {
                throw new Error("Variable '" + token.image + "' no definida en el procedimiento '" + procName + "'");
            }
            else if (procedures.get(procName).paramNames.contains(token.image))
            {
              total=procedures.get(procName).paramValues.get(token.image);
          	}
          	else if (variables.containsKey(token.image))
            {
                total=variables.get(token.image);
            }
          	else if (procedures.get(procName).varLocales.containsKey(token.image) )
          	{
          	  total=procedures.get(procName).varLocales.get(token.image);
            }
            else
            {
              throw new Error("Variable '" + token.image + "' no definida en el procedimiento '" + procName + "'");
           	}
        }

        return total;
    }
    )
    
}

//
//FACING RELATED
void changeFace(int dir):
{
}
{
  {
    while (world.getFacing()!=dir)
		world.turnRight();
  }
}

void faceDirections(boolean ejecutar, int numVeces, String procName):
{
}
{
 		 <WEST >
 		 	{ if (ejecutar)
	 			{ for (int i = 0; i < numVeces; i++)
	 				{ changeFace(3); }
	 			}
	 			if (procedures.containsKey(procName) ){
				Procedure proc= procedures.get(procName);
				proc.body.add("face west_"); }
	 		 }
		|  <EAST >  
			{ if (ejecutar)
	 			{ for (int i = 0; i < numVeces; i++)
	 				{ changeFace(2); }
	 			}
	 			if (procedures.containsKey(procName) ){
				Procedure proc= procedures.get(procName);
				proc.body.add("face east_"); }
	 		 }
		|  <NORTH >  
			{ if (ejecutar)
	 			{ for (int i = 0; i < numVeces; i++)
	 				{ changeFace(0); }
	 			}
	 			if (procedures.containsKey(procName) ){
				Procedure proc= procedures.get(procName);
				proc.body.add("face north_"); }
	 		 }
		| <SOUTH >  
			{ if (ejecutar)
	 			{ for (int i = 0; i < numVeces; i++)
	 				{ changeFace(1); }
	 			}
	 			if (procedures.containsKey(procName) ){
				Procedure proc= procedures.get(procName);
				proc.body.add("face south_"); }
	 		 }
}

void turnDirections(boolean ejecutar, int numVeces, String procName):
{
}
{
  	 <RIGHT>  { if (ejecutar) world.turnRight();
  	 			if (procedures.containsKey(procName) ){
				Procedure proc= procedures.get(procName);
				proc.body.add("turn right_"); }
			  }
  	| < LEFT >
  		{ if (ejecutar)
  			{ for (int i = 0; i < numVeces; i++)
		    	{ world.turnRight();
		    	world.turnRight();
		    	world.turnRight();}
		  }
		  	if (procedures.containsKey(procName) ){
			Procedure proc= procedures.get(procName);
			proc.body.add("turn left_"); }
	  	}
  	| < AROUND >
  		{ if (ejecutar)
  			{ for (int i = 0; i < numVeces; i++)
		    	{ world.turnRight();
		    	 world.turnRight(); }
		 	}
		 	
		 	if (procedures.containsKey(procName) ){
			Procedure proc= procedures.get(procName);
			proc.body.add("turn around_"); }
	  	}
}


//
//AUXILIARES
//
int getCardinalDirHeaded(String dir):
{int facing;}
{
  {
  facing=world.getFacing();
  if (dir=="FRONT")
	return world.getFacing();

  else if (dir=="BACK")
  {
	if (facing==0)
		return 1;
	else if (facing==1)
		return 0;
	else if (facing==2)
		return 3;
	else
		return 2;
  }

  else if (dir=="LEFT")
  {
	if (facing==0)
		return 3;
	else if (facing==1)
		return 2;
	else if (facing==2)
		return 1;
	else 
		return 0;
		
  }
  
  else 
  {
	if (facing==0)
		return 2;
	else if (facing==1)
		return 3;
	else if (facing==2)
		return 0;
	else 
		return 1;
		
  }
  
} }

Point getNewPos( int steps, String dir):
{}
{
  {
  Point newPos= new Point(1,1);
  Point oldPos= world.getPosition();
  int facing = world.getFacing();

  if (dir=="FRONT")
  {
	if (facing==0)
		newPos= new Point (oldPos.x, oldPos.y-steps);
	else if (facing==1)
		newPos=new Point (oldPos.x, oldPos.y+steps);
	else if (facing==2)
		newPos=new Point (oldPos.x+steps, oldPos.y);
	else if (facing==3)
		newPos=new Point (oldPos.x-steps, oldPos.y);
		
  }

  else if (dir=="BACK")
  {
	if (facing==0)
		newPos= new Point (oldPos.x, oldPos.y+steps);
	else if (facing==1)
		newPos=new Point (oldPos.x, oldPos.y-steps);
	else if (facing==2)
		newPos=new Point (oldPos.x-steps, oldPos.y);
	else if (facing==3)
		newPos=new Point (oldPos.x+steps, oldPos.y);
		
  }

  else if (dir=="LEFT")
  {
	if (facing==0)
		newPos= new Point (oldPos.x-steps, oldPos.y);
	else if (facing==1)
		newPos=new Point (oldPos.x+steps, oldPos.y);
	else if (facing==2)
		newPos=new Point (oldPos.x, oldPos.y+steps);
	else if (facing==3)
		newPos=new Point (oldPos.x, oldPos.y-steps);
		
  }
  
  else 
  {
	if (facing==0)
		newPos= new Point (oldPos.x+steps, oldPos.y);
	else if (facing==1)
		newPos=new Point (oldPos.x-steps, oldPos.y);
	else if (facing==2)
		newPos=new Point (oldPos.x, oldPos.y-steps);
	else if (facing==3)
		newPos=new Point (oldPos.x, oldPos.y+steps);
		
  }
  
  return newPos;
  
}
}

//
//BODY PROCEDURE Y WHILE INTERPRETER
void procBodyCommands(String procName):
{
  Procedure proc=procedures.get(procName);
  List<String > body = proc.body;
  String[] instrArr;
  int num;
}
{
	{
	  for (int i = 0; i < body.size(); i++)
	  {
	    instrArr=body.get(i).split("_");
	    
	    if (instrArr[0].equals("move forward"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	  world.moveForward(num, false); }
	    else if (instrArr[0].equals("move north"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrMoveNorth(num);}
	    else if (instrArr[0].equals("move south"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrMoveSouth(num);}
	    else if (instrArr[0].equals("move west"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrMoveWest(num);}
	    else if (instrArr[0].equals("move east"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrMoveEast(num);}
	    else if (instrArr[0].equals("move back"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrMoveJumpBack(num, false);}
	    else if (instrArr[0].equals("move left"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrMoveJumpLeft(num, false);}
	    else if (instrArr[0].equals("move right"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrMoveJumpRight(num, false);}

	    else if (instrArr[0].equals("jump forward"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	  world.moveForward(num, true); }
	    else if (instrArr[0].equals("jump north"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrJumpNorth(num);}
	    else if (instrArr[0].equals("jump south"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrJumpSouth(num);}
	    else if (instrArr[0].equals("jump west"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrJumpWest(num);}
	    else if (instrArr[0].equals("jump east"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrJumpEast(num);}
	    else if (instrArr[0].equals("jump back"))
	    	{num=Integer.parseInt(instrArr[1]);
	    	instrMoveJumpBack(num, true);}
	    else if (instrArr[0].equals("jump left"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrMoveJumpLeft(num, true);}
	    else if (instrArr[0].equals("jump right"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	instrMoveJumpRight(num, true);}

	   else if (instrArr[0].equals("turn right"))
	    	{ world.turnRight();}
	    else if (instrArr[0].equals("turn around"))
	    	{ world.turnRight();
	    	world.turnRight();}
	    else if (instrArr[0].equals("turn left"))
	    	{ world.turnRight();
	    	world.turnRight();
	    	world.turnRight();}

	    else if (instrArr[0].equals("face north"))
	    	{ changeFace(0);}
	    else if (instrArr[0].equals("face south"))
	    	{ changeFace(1);}
	    else if (instrArr[0].equals("face west"))
	    	{ changeFace(3);}
	    else if (instrArr[0].equals("face east"))
	    	{ changeFace(2);}
	    	
		else if (instrArr[0].equals("go to"))
	    	{ world.setPostion(Integer.parseInt(instrArr[1]), Integer.parseInt(instrArr[2])); }

	    else if (instrArr[0].equals("put chips"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	world.putChips(num);}
	    else if (instrArr[0].equals("pick chips"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	world.pickChips(num);}
	    else if (instrArr[0].equals("put balloons"))
	    	{ num=Integer.parseInt(instrArr[1]);
	    	world.putBalloons(num);}
	    else if (instrArr[0].equals("pick balloons"))
	    	{num=Integer.parseInt(instrArr[1]);
	    	world.grabBalloons(num);}
	    
	  }
	}
}

//Move instr
void instrMoveNorth(int x):
{}
{
  { world.moveVertically(-x, false);
	changeFace(0); }
}

void instrMoveSouth(int x):
{}
{
  { world.moveVertically(x, false);
	changeFace(1); }
}

void instrMoveWest(int x):
{}
{
  { world.moveHorizontally(-x, false);
	changeFace(3); }
}

void instrMoveEast(int x):
{}
{
  { world.moveHorizontally(x, false);
	changeFace(2); }
}

//Jump instr
void instrJumpNorth(int x):
{}
{
  { world.moveVertically(-x, true);
	changeFace(0); }
}

void instrJumpSouth(int x):
{}
{
  { world.moveVertically(x, true);
	changeFace(1); }
}

void instrJumpWest(int x):
{}
{
  { world.moveHorizontally(-x, true);
	changeFace(3); }
}

void instrJumpEast(int x):
{}
{
  { world.moveHorizontally(x, true);
	changeFace(2); }
}

void instrMoveJumpLeft(int x, boolean bool):
{}
{
  {
    if (world.getFacing()==0)
  	world.moveHorizontally(-x, bool) ;
  else if (world.getFacing()==1)
  	world.moveHorizontally(x, bool) ;
  else if (world.getFacing()==2)
  	world.moveVertically(-x, bool) ;
  else 
  	world.moveVertically(x, bool) ;
 }
}

void instrMoveJumpRight(int x, boolean bool):
{}
{
  {
    if (world.getFacing()==0)
  	world.moveHorizontally(x, bool) ;
  else if (world.getFacing()==1)
  	world.moveHorizontally(-x, bool) ;
  else if (world.getFacing()==2)
  	world.moveVertically(x, bool) ;
  else 
  	world.moveVertically(-x, bool) ; }
}

void instrMoveJumpBack(int x, boolean bool):
{}
{
  {
    if (world.getFacing()==0)
  	world.moveVertically(x, bool) ;
  else if (world.getFacing()==1)
  world.moveVertically(-x, bool) ;
  else if (world.getFacing()==2)
  	world.moveHorizontally(-x, bool) ;
  else 
  	world.moveHorizontally(x, bool) ; }
}

