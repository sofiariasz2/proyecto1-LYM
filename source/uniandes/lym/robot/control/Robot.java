/* Robot.java */
/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {
        private RobotWorldDec world;
        private HashMap<String, Integer> variables = new HashMap<>();
        private HashMap<String, Procedure> procedures = new HashMap<>();

        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida = new String();

        class Procedure {
                String name;
                List<String> parameters;
                List<String> body;

                Procedure(String name, List<String> parameters, List<String> body) {
                        this.name = name;
                        this.parameters = parameters;
                        this.body = body;
                }
        }

  final public Token objType() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BALLOONS:{
      t = jj_consume_token(BALLOONS);
{if ("" != null) return t;}
      break;
      }
    case CHIPS:{
      t = jj_consume_token(CHIPS);
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean command(Console sistema) throws ParseException {int x, y, n;
        boolean bool;
        Token t;
    bool = interna(sistema, true, 1, "");
{if ("" != null) return bool;}
    throw new Error("Missing return statement in function");
}

  final public boolean interna(Console sistema, boolean ejecutar, int numVecesEjecucion, String procName) throws ParseException {int x, y, n;
        salida = new String();
        Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MOVE:
    case TURN:
    case FACE:
    case PUT:
    case PICK:
    case POP:
    case GOTO:
    case JUMP:
    case NOP:
    case PROC:
    case IF:
    case WHILE:
    case FOR:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MOVE:{
        jj_consume_token(MOVE);
        jj_consume_token(48);
        x = expr();
        moveIndirTothe(x);
        jj_consume_token(49);
salida = "Command: Move";
        break;
        }
      case TURN:{
        jj_consume_token(TURN);
        jj_consume_token(48);
        turnDirections();
        jj_consume_token(49);
salida = "Command: Turn";
        break;
        }
      case FACE:{
        jj_consume_token(FACE);
        jj_consume_token(48);
        faceDirections();
        jj_consume_token(49);
salida = "Command: Face";
        break;
        }
      case PUT:{
        jj_consume_token(PUT);
        jj_consume_token(48);
        n = expr();
        jj_consume_token(OFTYPE);
        t = objType();
        jj_consume_token(49);
if (n <= 0) {

                            {if (true) throw new Error("PUT error: n debe ser mayor que 0");}
                        }
                        if (t.image.equals("#chips")) {
                            world.putChips(n);
                            salida = "Command: Put " + n + " chips";
                        } else if (t.image.equals("#balloons")) {
                            world.putBalloons(n);
                            salida = "Command: Put " + n + " balloons";
                        }
        break;
        }
      case PICK:{
        jj_consume_token(PICK);
        jj_consume_token(48);
        n = expr();
        jj_consume_token(OFTYPE);
        t = objType();
        jj_consume_token(49);
if (n <= 0) {

                            {if (true) throw new Error("PICK error: n debe ser mayor que 0");}
                        }

                        if (t.image.equals("#chips")) {
                            world.pickChips(n);
                            salida = "Command: Pick " + n + " chips";
                        } else if (t.image.equals("#balloons")) {
                            world.grabBalloons(n);
                            salida = "Command: Pick " + n + " balloons";
                        }
        break;
        }
      case POP:{
        jj_consume_token(POP);
        jj_consume_token(48);
        n = expr();
        jj_consume_token(49);
world.popBalloons(n); salida = "Command: Pop";
        break;
        }
      case GOTO:{
        jj_consume_token(GOTO);
        jj_consume_token(48);
        x = expr();
        jj_consume_token(50);
        y = expr();
        jj_consume_token(49);
world.setPostion(x, y); salida = "Command: GoTo";
        break;
        }
      case JUMP:{
        jj_consume_token(JUMP);
        jj_consume_token(48);
        n = expr();
        jumpIndirTothe(n);
        jj_consume_token(49);
salida = "Command: Jump";
        break;
        }
      case NOP:{
        jj_consume_token(NOP);
        jj_consume_token(49);
salida = "Command: NOP";
        break;
        }
      case PROC:{
        procedure(sistema);
        break;
        }
      case ID:{
        variable_declaration();
        break;
        }
      case IF:{
        conditional(sistema, procName);
        break;
        }
      case WHILE:
      case FOR:{
        loop(sistema, procName);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
try {
                        Thread.sleep(900);
                } catch (InterruptedException e) {
                        System.err.format("IOException: %s%n", e);
                }

                sistema.printOutput(salida);
                {if ("" != null) return true;}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void procedure(Console sistema) throws ParseException {Token procName;
        List<String> params = new ArrayList<>();
        List<String> body = new ArrayList<>();
    jj_consume_token(PROC);
    procName = jj_consume_token(ID);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 48:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(48);
      paramList(params);
    }
    jj_consume_token(51);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case MOVE:
      case TURN:
      case FACE:
      case PUT:
      case PICK:
      case POP:
      case GOTO:
      case JUMP:
      case NOP:
      case PROC:
      case IF:
      case WHILE:
      case FOR:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      interna(sistema, true, 1, procName.image);
    }
    jj_consume_token(52);
procedures.put(procName.image, new Procedure(procName.image, params, body));
}

  final public void paramList(List<String > params) throws ParseException {Token param;
    param = jj_consume_token(ID);
params.add(param.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:
      case 50:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        jj_consume_token(ID);
        jj_consume_token(48);
        break;
        }
      case 50:{
        jj_consume_token(50);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      param = jj_consume_token(ID);
params.add(param.image);
    }
}

  final public void direction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NORTH:{
      jj_consume_token(NORTH);
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
      break;
      }
    case AROUND:{
      jj_consume_token(AROUND);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void directionLRFB() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      jj_consume_token(LEFT);
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
      break;
      }
    case FRONT:{
      jj_consume_token(FRONT);
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void moveDirectionLRFB(int x) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      jj_consume_token(LEFT);
if (world.getFacing()==0)
                world.moveHorizontally(-x, false) ;
              else if (world.getFacing()==1)
                world.moveHorizontally(x, false) ;
              else if (world.getFacing()==2)
                world.moveVertically(-x, false) ;
              else
                world.moveVertically(x, false) ;
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
if (world.getFacing()==0)
                world.moveHorizontally(x, false) ;
              else if (world.getFacing()==1)
                world.moveHorizontally(-x, false) ;
              else if (world.getFacing()==2)
                world.moveVertically(x, false) ;
              else
                world.moveVertically(-x, false) ;
      break;
      }
    case FRONT:{
      jj_consume_token(FRONT);
world.moveForward(x, false) ;
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
if (world.getFacing()==0)
                world.moveVertically(x, false) ;
              else if (world.getFacing()==1)
              world.moveVertically(-x, false) ;
              else if (world.getFacing()==2)
                world.moveHorizontally(-x, false) ;
              else
                world.moveHorizontally(x, false) ;
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void moveDirectionNESW(int x) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EAST:{
      jj_consume_token(EAST);
world.moveHorizontally(x, false); changeFace(2);
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
world.moveHorizontally(-x, false); changeFace(3);
      break;
      }
    case NORTH:{
      jj_consume_token(NORTH);
world.moveVertically(-x, false); changeFace(0);
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
world.moveVertically(x, false); changeFace(1);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void moveIndirTothe(int x) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INDIR:{
      jj_consume_token(INDIR);
      moveDirectionNESW(x);
      break;
      }
    case TOTHE:{
      jj_consume_token(TOTHE);
      moveDirectionLRFB(x);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
world.moveForward(x, false);
    }
}

  final public void jumpIndirTothe(int x) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INDIR:{
      jj_consume_token(INDIR);
      jumpDirectionNESW(x);
      break;
      }
    case TOTHE:{
      jj_consume_token(TOTHE);
      jumpDirectionLRFB(x);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
world.moveForward(x, true);
    }
}

  final public void jumpDirectionNESW(int x) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EAST:{
      jj_consume_token(EAST);
world.moveHorizontally(x, true); changeFace(2);
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
world.moveHorizontally(-x, true); changeFace(3);
      break;
      }
    case NORTH:{
      jj_consume_token(NORTH);
world.moveVertically(-x, true); changeFace(0);
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
world.moveVertically(x, true); changeFace(1);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void jumpDirectionLRFB(int x) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      jj_consume_token(LEFT);
if (world.getFacing()==0)
                world.moveHorizontally(-x, true) ;
              else if (world.getFacing()==1)
                world.moveHorizontally(x, true) ;
              else if (world.getFacing()==2)
                world.moveVertically(-x, true) ;
              else
                world.moveVertically(x, true) ;
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
if (world.getFacing()==0)
                world.moveHorizontally(x, true) ;
              else if (world.getFacing()==1)
                world.moveHorizontally(-x, true) ;
              else if (world.getFacing()==2)
                world.moveVertically(x, true) ;
              else
                world.moveVertically(-x, true) ;
      break;
      }
    case FRONT:{
      jj_consume_token(FRONT);
world.moveForward(x, true) ;
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
if (world.getFacing()==0)
                world.moveVertically(x, true) ;
              else if (world.getFacing()==1)
              world.moveVertically(-x, true) ;
              else if (world.getFacing()==2)
                world.moveHorizontally(-x, true) ;
              else
                world.moveHorizontally(x, true) ;
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void directionNSEW() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NORTH:{
      jj_consume_token(NORTH);
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void variable_declaration() throws ParseException {
    jj_consume_token(ID);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 53:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      jj_consume_token(53);
      jj_consume_token(ID);
    }
    jj_consume_token(ASSIGN);
    expr();
    jj_consume_token(49);
}

/*
void assignment():
{
}
{
    <ID> ":=" expr() "."
}
*/
  final public 
void conditional(Console sistema, String procName) throws ParseException {boolean bool;
    jj_consume_token(IF);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      jj_consume_token(NOT);
    }
    bool = conditions();
    jj_consume_token(THEN);
    jj_consume_token(51);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case MOVE:
      case TURN:
      case FACE:
      case PUT:
      case PICK:
      case POP:
      case GOTO:
      case JUMP:
      case NOP:
      case PROC:
      case IF:
      case WHILE:
      case FOR:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      interna(sistema, true, 1, procName);
    }
    jj_consume_token(52);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      jj_consume_token(51);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 0:
        case MOVE:
        case TURN:
        case FACE:
        case PUT:
        case PICK:
        case POP:
        case GOTO:
        case JUMP:
        case NOP:
        case PROC:
        case IF:
        case WHILE:
        case FOR:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_7;
        }
        interna(sistema, true, 1, procName);
      }
      jj_consume_token(52);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
}

  final public void loop(Console sistema, String procName) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHILE:{
      jj_consume_token(WHILE);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_8;
        }
        jj_consume_token(NOT);
      }
      conditions();
      jj_consume_token(DO);
      jj_consume_token(51);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 0:
        case MOVE:
        case TURN:
        case FACE:
        case PUT:
        case PICK:
        case POP:
        case GOTO:
        case JUMP:
        case NOP:
        case PROC:
        case IF:
        case WHILE:
        case FOR:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_9;
        }
        interna(sistema, true, 1, procName);
      }
      jj_consume_token(52);
      break;
      }
    case FOR:{
      jj_consume_token(FOR);
      expr();
      jj_consume_token(REPEAT_BLOCK);
      jj_consume_token(51);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 0:
        case MOVE:
        case TURN:
        case FACE:
        case PUT:
        case PICK:
        case POP:
        case GOTO:
        case JUMP:
        case NOP:
        case PROC:
        case IF:
        case WHILE:
        case FOR:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_10;
        }
        interna(sistema, true, 1, procName);
      }
      jj_consume_token(52);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public boolean conditions() throws ParseException {int x=0;
  boolean bool;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CANMOVE:{
      jj_consume_token(CANMOVE);
      x = expr();
      bool = canMoveInDirToTheCondition(x);
{if ("" != null) return bool;}
      break;
      }
    case FACING:{
      jj_consume_token(FACING);
      bool = facingCondition();
{if ("" != null) return bool;}
      break;
      }
    case CANPUT:{
      jj_consume_token(CANPUT);
      x = expr();
      jj_consume_token(OFTYPE);
      bool = canPutCondition(x);
{if ("" != null) return bool;}
      break;
      }
    case CANPICK:{
      jj_consume_token(CANPICK);
      x = expr();
      jj_consume_token(OFTYPE);
      bool = canPickCondition(x);
{if ("" != null) return bool;}
      break;
      }
    case CANJUMP:{
      jj_consume_token(CANJUMP);
      x = expr();
      bool = canJumpInDirToTheCondition(x);
{if ("" != null) return bool;}
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean canJumpInDirToTheCondition(int x) throws ParseException {boolean bool;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INDIR:{
      jj_consume_token(INDIR);
      bool = canJumpNESWCondition(x);
{if ("" != null) return bool;}
      break;
      }
    case TOTHE:{
      jj_consume_token(TOTHE);
      bool = canJumpLRFBCondition(x);
{if ("" != null) return bool;}
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean canJumpNESWCondition(int steps) throws ParseException {Point pos;
  int newY;
  int newX;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SOUTH:{
      jj_consume_token(SOUTH);
pos=world.getPosition();
                  newY=pos.y+steps;
                  if (newY > world.getN() ||  world.isBlocked(new Point(pos.x, newY)))
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case NORTH:{
      jj_consume_token(NORTH);
pos=world.getPosition();
                  newY=pos.y- steps;
                  if (newY< 1 || world.isBlocked(new Point(pos.x, newY)))
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
pos=world.getPosition();
                  newX=pos.x+ steps;
                  if (newX > world.getN() || world.isBlocked(new Point(newX, pos.y)))
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
pos=world.getPosition();
                  newX=pos.x- steps;
                  if (newX< 1 || world.isBlocked(new Point(newX, pos.y)))
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean canJumpLRFBCondition(int steps) throws ParseException {Point pos;
  Point newPos;
  int newP;
  int cardinalDir;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      jj_consume_token(LEFT);
pos=world.getPosition();
                  newPos= getNewPos( steps, "LEFT");

                  if (newPos.x==pos.x)
                        newP=newPos.y;
                  else
                        newP=newPos.x;

                  if (newP > world.getN() || newP<1  || world.isBlocked(newPos) )
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
pos=world.getPosition();
                  newPos= getNewPos( steps, "RIGHT");

                  if (newPos.x==pos.x)
                        newP=newPos.y;
                  else
                        newP=newPos.x;

                  if (newP > world.getN() || newP<1 || world.isBlocked(newPos) )
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case FRONT:{
      jj_consume_token(FRONT);
pos=world.getPosition();
                  newPos= getNewPos( steps, "FRONT");

                  if (newPos.x==pos.x)
                        newP=newPos.y;
                  else
                        newP=newPos.x;

                  if (newP > world.getN() || newP<1 || world.isBlocked(newPos) )
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
pos=world.getPosition();
                  newPos= getNewPos( steps, "BACK");

                  if (newPos.x==pos.x)
                        newP=newPos.y;
                  else
                        newP=newPos.x;

                  if (newP > world.getN() || newP<1  || world.isBlocked(newPos) )
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean canMoveNESWCondition(int steps) throws ParseException {Point pos;
  int newY;
  int newX;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SOUTH:{
      jj_consume_token(SOUTH);
pos=world.getPosition();
                  newY=pos.y+steps;
                  if (newY > world.getN() || world.blockedInRange(pos.x, pos.y, newY, SOUTH) || world.isBlocked(new Point(pos.x, newY)))
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case NORTH:{
      jj_consume_token(NORTH);
pos=world.getPosition();
                  newY=pos.y- steps;
                  if (newY< 1 || world.blockedInRange(pos.x, pos.y, newY, NORTH) || world.isBlocked(new Point(pos.x, newY)))
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
pos=world.getPosition();
                  newX=pos.x+ steps;
                  if (newX > world.getN() || world.blockedInRange(pos.x, pos.y, newX, EAST) || world.isBlocked(new Point(newX, pos.y)))
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
pos=world.getPosition();
                  newX=pos.x- steps;
                  if (newX< 1 || world.blockedInRange(pos.x, pos.y, newX, WEST) || world.isBlocked(new Point(newX, pos.y)))
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean canMoveLRFBCondition(int steps) throws ParseException {Point pos;
  Point newPos;
  int newP;
  int cardinalDir;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      jj_consume_token(LEFT);
pos=world.getPosition();
                  newPos= getNewPos( steps, "LEFT");

                  if (newPos.x==pos.x)
                        newP=newPos.y;
                  else
                        newP=newPos.x;

                 cardinalDir= getCardinalDirHeaded("LEFT");

                  if (newP > world.getN() || newP<1 || world.blockedInRange(pos.x, pos.y, newP, cardinalDir) || world.isBlocked(newPos) )
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
pos=world.getPosition();
                  newPos= getNewPos( steps, "RIGHT");

                  if (newPos.x==pos.x)
                        newP=newPos.y;
                  else
                        newP=newPos.x;

                 cardinalDir= getCardinalDirHeaded("RIGHT");

                  if (newP > world.getN() || newP<1 || world.blockedInRange(pos.x, pos.y, newP, cardinalDir) || world.isBlocked(newPos) )
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case FRONT:{
      jj_consume_token(FRONT);
pos=world.getPosition();
                  newPos= getNewPos( steps, "FRONT");

                  if (newPos.x==pos.x)
                        newP=newPos.y;
                  else
                        newP=newPos.x;

                 cardinalDir= getCardinalDirHeaded("FRONT");

                  if (newP > world.getN() || newP<1 || world.blockedInRange(pos.x, pos.y, newP, cardinalDir) || world.isBlocked(newPos) )
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
pos=world.getPosition();
                  newPos= getNewPos( steps, "BACK");

                  if (newPos.x==pos.x)
                        newP=newPos.y;
                  else
                        newP=newPos.x;

                 cardinalDir= getCardinalDirHeaded("BACK");

                  if (newP > world.getN() || newP<1 || world.blockedInRange(pos.x, pos.y, newP, cardinalDir) || world.isBlocked(newPos) )
                        {if ("" != null) return false;}
                  else
                        {if ("" != null) return true;}
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public int getCardinalDirHeaded(String dir) throws ParseException {int facing;
facing=world.getFacing();
  if (dir=="FRONT")
        {if ("" != null) return world.getFacing();}

  else if (dir=="BACK")
  {
        if (facing==0)
                {if ("" != null) return 1;}
        else if (facing==1)
                {if ("" != null) return 0;}
        else if (facing==2)
                {if ("" != null) return 3;}
        else
                {if ("" != null) return 2;}
  }

  else if (dir=="LEFT")
  {
        if (facing==0)
                {if ("" != null) return 3;}
        else if (facing==1)
                {if ("" != null) return 2;}
        else if (facing==2)
                {if ("" != null) return 1;}
        else
                {if ("" != null) return 0;}

  }

  else
  {
        if (facing==0)
                {if ("" != null) return 2;}
        else if (facing==1)
                {if ("" != null) return 3;}
        else if (facing==2)
                {if ("" != null) return 0;}
        else
                {if ("" != null) return 1;}

  }
    throw new Error("Missing return statement in function");
}

  final public Point getNewPos(int steps, String dir) throws ParseException {
Point newPos= new Point(1,1);
  Point oldPos= world.getPosition();
  int facing = world.getFacing();

  if (dir=="FRONT")
  {
        if (facing==0)
                newPos= new Point (oldPos.x, oldPos.y-steps);
        else if (facing==1)
                newPos=new Point (oldPos.x, oldPos.y+steps);
        else if (facing==2)
                newPos=new Point (oldPos.x+steps, oldPos.y);
        else if (facing==3)
                newPos=new Point (oldPos.x-steps, oldPos.y);

  }

  else if (dir=="BACK")
  {
        if (facing==0)
                newPos= new Point (oldPos.x, oldPos.y+steps);
        else if (facing==1)
                newPos=new Point (oldPos.x, oldPos.y-steps);
        else if (facing==2)
                newPos=new Point (oldPos.x-steps, oldPos.y);
        else if (facing==3)
                newPos=new Point (oldPos.x+steps, oldPos.y);

  }

  else if (dir=="LEFT")
  {
        if (facing==0)
                newPos= new Point (oldPos.x-steps, oldPos.y);
        else if (facing==1)
                newPos=new Point (oldPos.x+steps, oldPos.y);
        else if (facing==2)
                newPos=new Point (oldPos.x, oldPos.y+steps);
        else if (facing==3)
                newPos=new Point (oldPos.x, oldPos.y-steps);

  }

  else
  {
        if (facing==0)
                newPos= new Point (oldPos.x+steps, oldPos.y);
        else if (facing==1)
                newPos=new Point (oldPos.x-steps, oldPos.y);
        else if (facing==2)
                newPos=new Point (oldPos.x, oldPos.y-steps);
        else if (facing==3)
                newPos=new Point (oldPos.x, oldPos.y+steps);

  }

  {if ("" != null) return newPos;}
    throw new Error("Missing return statement in function");
}

  final public boolean canMoveInDirToTheCondition(int x) throws ParseException {boolean bool;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INDIR:{
      jj_consume_token(INDIR);
      bool = canMoveNESWCondition(x);
{if ("" != null) return bool;}
      break;
      }
    case TOTHE:{
      jj_consume_token(TOTHE);
      bool = canMoveLRFBCondition(x);
{if ("" != null) return bool ;}
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean canPutCondition(int x) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BALLOONS:{
      jj_consume_token(BALLOONS);
if ( world.getMyBalloons()< x) {if ("" != null) return false;} else {if ("" != null) return true;}
      break;
      }
    case CHIPS:{
      jj_consume_token(CHIPS);
if (x > world.freeSpacesForChips() ||  world.getMyChips()< x) {if ("" != null) return false;} else {if ("" != null) return true;}
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean canPickCondition(int x) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BALLOONS:{
      jj_consume_token(BALLOONS);
if (x > world.countBalloons()) {if ("" != null) return false;} else {if ("" != null) return true;}
      break;
      }
    case CHIPS:{
      jj_consume_token(CHIPS);
if (x > world.chipsToPick()) {if ("" != null) return false;} else {if ("" != null) return true;}
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean facingCondition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NORTH:{
      jj_consume_token(NORTH);
{if ("" != null) return world.facingNorth();}
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
{if ("" != null) return world.facingSouth();}
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
{if ("" != null) return world.facingEast();}
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
{if ("" != null) return world.facingWest();}
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public int expr() throws ParseException {int total = 1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      jj_consume_token(NUM);
total = Integer.parseInt(token.image);
      break;
      }
    case ID:{
      jj_consume_token(ID);
if (!variables.containsKey(token.image)) {if (true) throw new Error("Variable no definida: " + token.image);} total = variables.get(token.image);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return total;}
    throw new Error("Missing return statement in function");
}

  final public boolean varExiste(String procName, String var) throws ParseException {
Procedure proc= procedures.get(procName);
    List<String > parametros = proc.parameters;
    if (parametros.contains(var))
        {if ("" != null) return true;}
    else
        {if ("" != null) return false;}
    throw new Error("Missing return statement in function");
}

  final public void changeFace(int dir) throws ParseException {
while (world.getFacing()!=dir)
                world.turnRight();
}

  final public void faceDirections() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WEST:{
      jj_consume_token(WEST);
changeFace(3);
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
changeFace(2);
      break;
      }
    case NORTH:{
      jj_consume_token(NORTH);
changeFace(0);
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
changeFace(1);
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void turnDirections() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RIGHT:{
      jj_consume_token(RIGHT);
world.turnRight();
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
world.turnRight(); world.turnRight(); world.turnRight();
      break;
      }
    case AROUND:{
      jj_consume_token(AROUND);
world.turnRight(); world.turnRight();
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xc0000000,0x10a5ff80,0x10a5ff81,0x0,0x10a5ff81,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x3000000,0x3000000,0x0,0x0,0x0,0x0,0x0,0x10a5ff81,0x10a5ff81,0x100000,0x0,0x10a5ff81,0x10a5ff81,0xa00000,0x0,0x3000000,0x0,0x0,0x0,0x0,0x3000000,0xc0000000,0xc0000000,0x0,0x10000000,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x10000,0x0,0x40000,0x40000,0x1fc,0xf,0xf,0x1e0,0x0,0x0,0x1e0,0xf,0x1e0,0x200000,0x8000,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x7c00,0x0,0x1e0,0xf,0x1e0,0xf,0x0,0x0,0x0,0x1e0,0x200,0x1e0,0x1c,};
	}

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[54];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 38; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 54; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
